import os
import requests
from openai import OpenAI

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


def fetch_cve_data(cve_id):
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        return {"error": f"Error fetching CVE data: {str(e)}"}

def extract_details(cve_data):
    if 'vulnerabilities' in cve_data and cve_data['vulnerabilities']:
        vuln_data = cve_data['vulnerabilities'][0]
        if 'cve' in vuln_data:
            vuln = vuln_data['cve']
            details = {
                'id': vuln['id'],
                'severity': vuln['metrics']['cvssMetricV31'][0]['cvssData']['baseSeverity'] if 'cvssMetricV31' in vuln['metrics'] else 'N/A',
                'description': vuln['descriptions'][0]['value'] if 'descriptions' in vuln and vuln['descriptions'] else 'N/A',
                'published_date': vuln['published'] if 'published' in vuln else 'N/A',
                'last_modified_date': vuln['lastModified'] if 'lastModified' in vuln else 'N/A',
                'cvss_score': vuln['metrics']['cvssMetricV31'][0]['cvssData']['baseScore'] if 'cvssMetricV31' in vuln['metrics'] else 'N/A',
                'vector_string': vuln['metrics']['cvssMetricV31'][0]['cvssData']['vectorString'] if 'cvssMetricV31' in vuln['metrics'] else 'N/A',
                'references': [{'url': ref['url'], 'tags': ref['tags']} for ref in vuln['references']] if 'references' in vuln else [],
                'cpe_configurations': extract_cpe_details(vuln['configurations']) if 'configurations' in vuln else []
            }
            return details
    return None

def extract_cpe_details(config_data):
    cpe_details = []
    if isinstance(config_data, dict) and 'nodes' in config_data:
        for node in config_data['nodes']:
            for cpe_match in node['cpeMatch']:
                cpe_details.append({
                    'vulnerable': cpe_match['vulnerable'],
                    'criteria': cpe_match['criteria']
                })
    elif isinstance(config_data, list):
        for config in config_data:
            if 'nodes' in config:
                for node in config['nodes']:
                    for cpe_match in node['cpeMatch']:
                        cpe_details.append({
                            'vulnerable': cpe_match['vulnerable'],
                            'criteria': cpe_match['criteria']
                        })
    return cpe_details

def get_openai_response(details):
    prompt = (
        f"Berikut adalah detail dari CVE yang diidentifikasi:\n"
        f"- CVE ID: {details['id']}\n"
        f"- Tingkat Keparahan: {details['severity']}\n"
        f"- Deskripsi: {details['description']}\n"
        f"- Tanggal Publikasi: {details['published_date']}\n"
        f"- Tanggal Modifikasi Terakhir: {details['last_modified_date']}\n"
        f"- Skor CVSS: {details['cvss_score']}\n"
        f"- String Vektor: {details['vector_string']}\n"
        f"- Referensi: {details['references']}\n\n"
        "Analisis mendalam mengenai dampak CVE ini terhadap sistem yang rentan:\n"
        "- Dampak: Bagaimana CVE ini dapat mempengaruhi sistem dan data?\n"
        "- Mitigasi: Apa langkah-langkah yang dapat diambil untuk mengurangi risiko?\n"
        "- Rekomendasi: Saran terbaik untuk organisasi dalam menangani kerentanan ini.\n"
        "Sertakan juga contoh kasus nyata jika ada."
    )
    response = client.chat.completions.create(model="gpt-4",
    messages=[
        {"role": "system", "content": "You are a cybersecurity expert."},
        {"role": "user", "content": prompt}
    ],
    max_tokens=500)
    return response.choices[0].message.content.strip()

def main():
    cve_id = input("Enter CVE ID: ")
    result = fetch_cve_data(cve_id)

    if 'error' not in result:
        details = extract_details(result)
        if details:
            openai_response = get_openai_response(details)
            print(f"OpenAI Response for CVE {cve_id}:\n{openai_response}")
        else:
            print("Failed to extract CVE details.")
    else:
        print(result['error'])

if __name__ == "__main__":
    main()

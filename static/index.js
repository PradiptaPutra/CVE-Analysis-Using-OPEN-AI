let isFirstInput = true;
let firstUserInput = "";

function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    const toggleButton = document.querySelector('.toggle-button i');
    
    sidebar.classList.toggle('sidebar-collapsed');
    sidebar.classList.toggle('sidebar-expanded');
    
    if (sidebar.classList.contains('sidebar-collapsed')) {
        toggleButton.classList.remove('fa-arrow-circle-left');
        toggleButton.classList.add('fa-arrow-circle-right');
    } else {
        toggleButton.classList.remove('fa-arrow-circle-right');
        toggleButton.classList.add('fa-arrow-circle-left');
    }
    
    const spans = sidebar.querySelectorAll('.sidebar-item span');
    spans.forEach(span => {
        if (sidebar.classList.contains('sidebar-collapsed')) {
            span.style.display = 'none';
        } else {
            setTimeout(() => {
                span.style.display = 'inline';
            }, 300);
        }
    });
}

function startNewThread() {
    fetch('/new_thread', {
        method: 'POST'
    }).then(response => response.json()).then(data => {
        if (data.message === "New thread started.") {
            const chatBox = document.getElementById('chat-box');
            chatBox.innerHTML = '';
            document.getElementById('input-container').style.display = 'flex';
            document.getElementById('follow-up-container').style.display = 'none';
            document.getElementById('new-thread-button').style.display = 'none';
            document.getElementById('sources-section').style.display = 'none';
            document.getElementById('answer-section').style.display = 'none';
            document.getElementById('analysis-result-section').style.display = 'none';
            document.getElementById('file-upload-analysis-section').style.display = 'none';
            isFirstInput = true;
        }
    });
}

function logOut() {
    console.log("Logging out...");  // Debugging log
    fetch('/logout', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrf_token')  // Include CSRF token if needed
        }
    })
    .then(response => {
        console.log("Response received:", response);  // Debugging log
        if (response.redirected) {
            window.location.href = response.url;  // Redirect to login page
        } else {
            alert("Logout failed.");
        }
    })
    .catch(error => {
        console.error('Error logging out:', error);
        alert("Logout failed.");
    });
}

// Function to get CSRF token if you need it
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

document.addEventListener('DOMContentLoaded', function() {
    // Ensure event listeners are added after DOM content is loaded
    document.getElementById('send-button').addEventListener('click', sendMessage);
    document.getElementById('follow-up-button').addEventListener('click', sendFollowUp);
    document.getElementById('web-search-button').addEventListener('click', handleWebSearchButtonClick);
    document.getElementById('csv-upload').addEventListener('change', handleCSVUpload);
    document.getElementById('save-thread-button').addEventListener('click', handleSaveThreadButtonClick);
    document.getElementById('toggleSidebar').addEventListener('click', toggleSidebar);
});

function handleSendButtonClick() {
    const userInput = document.getElementById('user-input').value.trim();
    const audience = document.getElementById('audience-select').value;
    if (userInput) {
        sendMessageOrSearch(userInput, audience);
        document.getElementById('user-input').value = ''; // Clear the input field
    }
}

function handleWebSearchButtonClick() {
    const userInput = document.getElementById('user-input').value.trim();
    if (userInput) {
        performWebSearch(userInput);
        document.getElementById('user-input').value = ''; // Clear the input field
    }
}

function handleCSVUpload(event) {
    const file = event.target.files[0];
    if (file) {
        uploadCSV(file);
    }
}

function handleFollowUpButtonClick() {
    const followUpInputElement = document.getElementById('follow-up-input');
    const followUpInput = followUpInputElement.value.trim();
    if (followUpInput) {
        sendFollowUpQuestion(followUpInput);
        followUpInputElement.value = ''; // Clear the input value
    }
}

function handleSaveThreadButtonClick() {
    const description = prompt("Enter a description for this thread:");
    if (description) {
        saveThread(description);
    } else {
        alert("Description is required to save the thread.");
    }
}

document.getElementById('send-button').addEventListener('click', () => {
    let userInput = document.getElementById('user-input').value.trim();
    userInput = userInput.toUpperCase(); // Ensure CVE ID is uppercase
    const audience = document.getElementById('audience-select').value;
    if (userInput.toLowerCase() === 'upload') {
        document.getElementById('csv-upload').click();
    } else {
        sendMessageOrSearch(userInput, audience);
        document.getElementById('user-input').value = ''; // Clear the input field
    }
});

document.getElementById('web-search-button').addEventListener('click', () => {
    const userInput = document.getElementById('user-input').value;
    if (userInput) {
        performWebSearch(userInput);
        document.getElementById('user-input').value = ''; // Clear the input field
        if (isFirstInput) {
            firstUserInput = userInput;
            isFirstInput = false;
            document.getElementById('save-thread-button').style.display = 'block'; // Show the save thread button
        }
    }
});

document.getElementById('csv-upload').addEventListener('change', (event) => {
    const file = event.target.files[0];
    if (file) {
        uploadCSV(file);
    }
});

function uploadCSV(file) {
    showLoading();
    const formData = new FormData();
    formData.append('file', file);

    fetch('/upload', {
        method: 'POST',
        body: formData
    }).then(response => response.json()).then(data => {
        hideLoading();
        if (data.error) {
            addMessage(`<strong>Error:</strong> ${data.error}`);
        } else {
            displayFileUploadAnalysis(data.responses);
        }
    });
}

function displayFileUploadAnalysis(responses) {
    const analysisContent = document.getElementById('analysis-content');
    analysisContent.innerHTML = '';  // Clear previous content

    responses.forEach(response => {
        const cveId = Object.keys(response)[0];
        const analysis = response[cveId];
        analysisContent.innerHTML += `<div><strong>${cveId}:</strong> ${formatResponse(analysis)}</div><br>`;
    });

    document.getElementById('file-upload-analysis-section').style.display = 'block';
}

function addMessage(content, isUser = false) {
    const chatBox = document.getElementById('chat-box');
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message');
    messageDiv.classList.add(isUser ? 'is-user' : 'is-bot');
    messageDiv.innerHTML = content;
    chatBox.appendChild(messageDiv);
    chatBox.scrollTop = chatBox.scrollHeight;
    if (isUser && isFirstInput) {
        firstUserInput = content;
        isFirstInput = false;
        document.getElementById('save-thread-button').style.display = 'block'; // Show the save thread button
    }
}

function showLoading() {
    const chatBox = document.getElementById('chat-box');
    const loadingDiv = document.createElement('div');
    loadingDiv.classList.add('message', 'is-bot');
    loadingDiv.innerHTML = '<div class="loading-spinner"></div>';
    loadingDiv.id = 'loading-spinner';
    chatBox.appendChild(loadingDiv);
    chatBox.scrollTop = chatBox.scrollHeight;
}

function hideLoading() {
    const loadingSpinner = document.getElementById('loading-spinner');
    if (loadingSpinner) {
        loadingSpinner.remove();
    }
}

function sendMessageOrSearch(message, audience) {
    addMessage(message, true);
    showLoading();

    if (message.toUpperCase().includes("CVE-")) {
        fetchCveDetails(message);
    } else {
        performWebSearch(message);
    }
}

function fetchCveDetails(cveId) {
    fetch('/get_cve_details', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ cve_id: cveId })
    }).then(response => response.json()).then(data => {
        hideLoading();
        if (data.error) {
            addMessage(`<strong>Error:</strong> ${data.error}`);
        } else {
            displayAnalysisResult(data.response);
            showFollowUpContainer();
        }
    });
}

function saveThread(description) {
    const title = document.getElementById('user-input').value.trim();
    fetch('/save_thread', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ title, description })
    }).then(response => response.json()).then(data => {
        if (data.message) {
            alert("Thread saved successfully!");
        } else if (data.error) {
            alert(`Error: ${data.error}`);
        }
    });
}

function displayAnalysisResult(response) {
    const answerContent = document.getElementById('analysis-result-content');

    // Updated line: replace '##' with an empty string globally
    const formattedResponse = formatResponse(response).replace(/##/g, '');

    answerContent.innerHTML = formattedResponse;
    document.getElementById('analysis-result-section').style.display = 'block';
}


function performWebSearch(query) {
    showLoading();
    fetch('/web_search', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ user_input: query })
    })
    .then(response => response.json())
    .then(data => {
        hideLoading();
        if (data.error) {
            addMessage(`<strong>Error:</strong> ${data.error}`);
        } else {
            displaySources(data.results);
            displaySummary(data.summary);
            showFollowUpContainer();
            document.getElementById('save-thread-button').style.display = 'block';
        }
    });
}

function chooseCVE(link) {
    fetch('/get_openai_response_link', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            link: link
        })
    }).then(response => response.json()).then(data => {
        if (data.error) {
            addMessage(`<strong>Error:</strong> ${data.error}`);
        } else {
            displayAnswer(data.response);
        }
    });
}

function uploadCSV(file) {
    showLoading();
    const formData = new FormData();
    formData.append('file', file);

    fetch('/upload', {
        method: 'POST',
        body: formData
    }).then(response => response.json()).then(data => {
        hideLoading();
        if (data.error) {
            addMessage(`<strong>Error:</strong> ${data.error}`);
        } else {
            displayFileUploadAnalysis(data.responses);
            showFollowUpContainer(); // Show follow-up input after CSV analysis
            document.getElementById('save-thread-button').style.display = 'block'; // Show the save thread button
            document.getElementById('follow-up-button').addEventListener('click', handleFollowUpButtonClick);
        }
    });
}

function displaySources(results) {
    const sourcesContent = document.getElementById('sources-content');
    sourcesContent.innerHTML = '';

    // Sort results by date
    results.sort((a, b) => new Date(b.date) - new Date(a.date));

    results.forEach(result => {
        const date = result.date ? `<p>Date: ${result.date}</p>` : '';
        sourcesContent.innerHTML += `
            <div class="source-item">
                <h3><a href="${result.redirect_link}" target="_blank">${result.displayed_link}</a></h3>
                ${date}
            </div>
        `;
    });

    document.getElementById('sources-section').style.display = 'block';
}

function displaySummary(summary) {
    const answerContent = document.getElementById('answer-content');
    const formattedSummary = summary.replace(/##\s+/g, '').replace(/\*\*/g, ''); 
    answerContent.innerHTML = `<p>${formattedSummary}</p>`;
    document.getElementById('answer-section').style.display = 'block';
}

function displaySearchResults(results) {
    const resultsContent = document.getElementById('results-content');
    resultsContent.innerHTML = '';
    results.forEach(result => {
        const date = result.date ? `<p>Date: ${result.date}</p>` : '';
        resultsContent.innerHTML += `
            <div>
                <h3><a href="${result.displayed_link}" target="_blank">${result.displayed_link}</a></h3>
                ${date}
            </div>
        `;
    });
    document.getElementById('search-results').style.display = 'block';
}

function formatResponse(response) {
    if (!response) return 'No response available';

    const lines = response.split('\n');
    let formatted = '';
    let inList = false;

    lines.forEach(line => {
        // Remove all symbols like * or #
        line = line.replace(/[\*\#]/g, '');

        if (line.startsWith('Analysis Result')) {
            if (inList) {
                formatted += '</ul>';
                inList = false;
            }
            formatted += `<h2><strong>${line}</strong></h2>`;
        } else if (line.startsWith('CVE Analysis ')) {
            if (inList) {
                formatted += '</ul>';
                inList = false;
            }
            formatted += `<h3>${line}</h3>`;
        } else if (line.startsWith('CVE Identification:')) {
            if (inList) {
                formatted += '</ul>';
                inList = false;
            }
            formatted += `<h4>${line}</h4>`;
        } else if (line.startsWith('CVE ID:') || line.startsWith('Severity:') || line.startsWith('Description:')) {
            if (inList) {
                formatted += '</ul>';
                inList = false;
            }
            const [label, value] = line.split(': ');
            formatted += `<p><strong>${label}:</strong> ${value}</p>`;
        } else if (line.trim() === '') {
            // Skip empty lines
        } else {
            if (inList) {
                formatted += '</ul>';
                inList = false;
            }
            formatted += `<p>${line}</p>`;
        }
    });

    if (inList) {
        formatted += '</ul>';
    }

    return formatted;
}



document.getElementById('follow-up-button').addEventListener('click', () => {
    const followUpInputElement = document.getElementById('follow-up-input');
    const followUpInput = followUpInputElement.value;
    if (followUpInput) {
        sendFollowUpQuestion(followUpInput);
        followUpInputElement.value = ''; // Clear the input value
    }
});


function sendFollowUpQuestion(question) {
    addMessage(question, true);
    showLoading();

    const inputElement = document.getElementById('follow-up-question');
    if (inputElement) {
        inputElement.value = '';
    }

    fetch('/follow-up', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ follow_up_question: question })
    }).then(response => response.json()).then(data => {
        hideLoading();
        if (data.error) {
            addMessage('Error: ' + data.error);
        } else {
            let formattedResponse = data.response
                .replace(/[#*]/g, '')
                .replace(/\n{2,}/g, '\n')
                .trim();
            addMessage(formattedResponse, false);
        }
    });
}

document.getElementById('new-thread-button').addEventListener('click', () => {
    fetch('/new_thread', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    }).then(response => response.json()).then(data => {
        if (data.message === "New thread started.") {
            const chatBox = document.getElementById('chat-box');
            chatBox.innerHTML = '';
            document.getElementById('input-container').style.display = 'flex';
            document.getElementById('follow-up-container').style.display = 'none';
            document.getElementById('new-thread-button').style.display = 'none';
            document.getElementById('sources-section').style.display = 'none';
            document.getElementById('answer-section').style.display = 'none';
            isFirstInput = true;
        }
    });
});

function showFollowUpContainer() {
    document.getElementById('follow-up-container').style.display = 'flex';
}

document.getElementById('save-thread-button').addEventListener('click', () => {
    const description = prompt("Enter a description for this thread:");

    if (description) {
        fetch('/save_thread', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ title: firstUserInput, description: description })
        }).then(response => response.json()).then(data => {
            if (data.message) {
                alert("Thread saved successfully!");
            } else if (data.error) {
                alert(`Error: ${data.error}`);
            }
        });
    } else {
        alert("Description is required to save the thread.");
    }
});

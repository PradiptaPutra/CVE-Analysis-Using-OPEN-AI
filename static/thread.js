const threadId = {{ thread_id }};
document.addEventListener('DOMContentLoaded', fetchThread);

function fetchThread() {
    fetch(`/continue_thread/${threadId}`)
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert(data.error);
            } else {
                const thread = data.thread;
                document.getElementById('thread-title').textContent = thread.title;
                const threadContainer = document.getElementById('thread-container');
                thread.session_history.forEach(message => {
                    const messageDiv = document.createElement('div');
                    messageDiv.classList.add('message');
                    if (message.role === 'user') {
                        messageDiv.classList.add('is-user');
                    } else {
                        messageDiv.classList.add('is-bot');
                    }
                    messageDiv.innerHTML = `<p>${message.content}</p>`;
                    threadContainer.appendChild(messageDiv);
                });
            }
        })
        .catch(error => {
            console.error('Error fetching thread:', error);
        });
}

function sendMessage() {
    const newMessageInput = document.getElementById('new-message');
    const messageContent = newMessageInput.value.trim();
    if (!messageContent) {
        return;
    }

    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message', 'is-user');
    messageDiv.innerHTML = `<p>${messageContent}</p>`;
    document.getElementById('thread-container').appendChild(messageDiv);
    newMessageInput.value = '';

    fetch(`/continue_conversation/${threadId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrf_token')
        },
        body: JSON.stringify({ message: messageContent })
    })
    .then(response => response.json())
    .then(data => {
        if (data.bot_response) {
            const botMessageDiv = document.createElement('div');
            botMessageDiv.classList.add('message', 'is-bot');
            botMessageDiv.innerHTML = `<p>${data.bot_response}</p>`;
            document.getElementById('thread-container').appendChild(botMessageDiv);
        }
    })
    .catch(error => {
        console.error('Error sending message:', error);
    });
}

function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    sidebar.classList.toggle('sidebar-collapsed');
    sidebar.classList.toggle('sidebar-expanded');
    const spans = sidebar.querySelectorAll('.sidebar-item span');
    spans.forEach(span => {
        if (sidebar.classList.contains('sidebar-collapsed')) {
            span.style.display = 'none';
        } else {
            setTimeout(() => {
                span.style.display = 'inline';
            }, 300);
        }
    });
}

function logOut() {
    console.log("Logging out...");
    fetch('/logout', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrf_token')
        }
    })
    .then(response => {
        console.log("Response received:", response);
        if (response.redirected) {
            window.location.href = response.url;
        } else {
            alert("Logout failed.");
        }
    })
    .catch(error => {
        console.error('Error logging out:', error);
        alert("Logout failed.");
    });
}

function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

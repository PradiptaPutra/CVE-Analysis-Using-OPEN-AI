window.onload = function () {
  const topProductsData = {
    labels: ["Apache httpd", "OpenSSH", "Ssl Certificate", "openssh"],
    datasets: [
      {
        data: [1000, 174, 26, 54],
        backgroundColor: ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0"],
      },
    ],
  };
  const vulnSourceData = {
    labels: [
      "Networks systems",
      "Others",
      "Third party products",
      "SSL certificates",
    ],
    datasets: [
      {
        data: [1400, 4500, 2, 0],
        backgroundColor: ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0"],
      },
    ],
  };
  const vulnSeverityData = {
    labels: ["Critical", "High", "Medium", "Low", "N/A"],
    datasets: [
      {
        data: [149, 195, 387, 95, 4400],
        backgroundColor: [
          "#FF6384",
          "#FF9F40",
          "#FFCE56",
          "#4BC0C0",
          "#C9CBCF",
        ],
      },
    ],
  };
  const vulnStatusData = {
    labels: ["Action Waiting", "Resolved", "False Positive"],
    datasets: [
      {
        data: [5200, 13, 647],
        backgroundColor: ["#FF6384", "#4BC0C0", "#FFCE56"],
      },
    ],
  };

  const ctxTopProducts = document
    .getElementById("top-products-chart")
    .getContext("2d");
  new Chart(ctxTopProducts, {
    type: "doughnut",
    data: topProductsData,
  });

  const ctxVulnSource = document
    .getElementById("vuln-source-chart")
    .getContext("2d");
  new Chart(ctxVulnSource, {
    type: "doughnut",
    data: vulnSourceData,
  });

  const ctxVulnSeverity = document
    .getElementById("vuln-severity-chart")
    .getContext("2d");
  new Chart(ctxVulnSeverity, {
    type: "doughnut",
    data: vulnSeverityData,
  });

  const ctxVulnStatus = document
    .getElementById("vuln-status-chart")
    .getContext("2d");
  new Chart(ctxVulnStatus, {
    type: "doughnut",
    data: vulnStatusData,
  });
};

function fetchInsights() {
  const insightsContent = document.getElementById("insights-content");
  insightsContent.innerText = "Fetching insights...";

  fetch("/analyze_cve_data")
    .then((response) => response.json())
    .then((data) => {
      if (data.error) {
        insightsContent.innerText = "Error: " + data.error;
      } else {
        let formattedAnalysis = data.analysis
          .replace(/[#*]/g, "")
          .replace(/\n{2,}/g, "\n")
          .trim();
        insightsContent.innerText = formattedAnalysis;
      }
    })
    .catch((error) => {
      insightsContent.innerText = "Error: " + error;
    });
}

window.onload = function () {
  const storedSidebarState = localStorage.getItem("sidebarState");
  const sidebar = document.getElementById("sidebar");
  const toggleButtonIcon = document.querySelector(".toggle-button i");
  if (storedSidebarState === "expanded") {
    sidebar.classList.replace("sidebar-collapsed", "sidebar-expanded");
    toggleButtonIcon.classList.replace(
      "fa-arrow-circle-right",
      "fa-arrow-circle-left"
    );
  } else {
    sidebar.classList.replace("sidebar-expanded", "sidebar-collapsed");
    toggleButtonIcon.classList.replace(
      "fa-arrow-circle-left",
      "fa-arrow-circle-right"
    );
  }
};

function toggleSidebar() {
  const sidebar = document.getElementById("sidebar");
  const toggleButtonIcon = document.querySelector(".toggle-button i");
  sidebar.classList.toggle("sidebar-collapsed");
  sidebar.classList.toggle("sidebar-expanded");
  if (sidebar.classList.contains("sidebar-expanded")) {
    toggleButtonIcon.classList.replace(
      "fa-arrow-circle-right",
      "fa-arrow-circle-left"
    );
    localStorage.setItem("sidebarState", "expanded");
  } else {
    toggleButtonIcon.classList.replace(
      "fa-arrow-circle-left",
      "fa-arrow-circle-right"
    );
    localStorage.setItem("sidebarState", "collapsed");
  }
}

function logOut() {
  console.log("Logging out..."); // Debugging log
  fetch("/logout", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "X-CSRFToken": getCookie("csrf_token"), // Include CSRF token if needed
    },
  })
    .then((response) => {
      console.log("Response received:", response); // Debugging log
      if (response.redirected) {
        window.location.href = response.url; // Redirect to login page
      } else {
        alert("Logout failed.");
      }
    })
    .catch((error) => {
      console.error("Error logging out:", error);
      alert("Logout failed.");
    });
}

// Function to get CSRF token if you need it
function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== "") {
    const cookies = document.cookie.split(";");
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      // Does this cookie string begin with the name we want?
      if (cookie.substring(0, name.length + 1) === name + "=") {
        cookieValue = decodeURIComponent(
          cookie.substring(name.length + 1)
        );
        break;
      }
    }
  }
  return cookieValue;
}

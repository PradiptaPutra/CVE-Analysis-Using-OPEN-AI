function toggleSidebar() {
  const sidebar = document.getElementById("sidebar");
  const toggleButton = document.querySelector(".toggle-button i");

  sidebar.classList.toggle("sidebar-collapsed");
  sidebar.classList.toggle("sidebar-expanded");

  if (sidebar.classList.contains("sidebar-collapsed")) {
    toggleButton.classList.remove("fa-arrow-circle-left");
    toggleButton.classList.add("fa-arrow-circle-right");
  } else {
    toggleButton.classList.remove("fa-arrow-circle-right");
    toggleButton.classList.add("fa-arrow-circle-left");
  }

  const spans = sidebar.querySelectorAll(".sidebar-item span");
  spans.forEach((span) => {
    if (sidebar.classList.contains("sidebar-collapsed")) {
      span.style.display = "none";
    } else {
      setTimeout(() => {
        span.style.display = "inline";
      }, 300);
    }
  });
}

function deleteThread(threadId) {
  fetch(`/delete_thread/${threadId}`, {
    method: "DELETE",
    headers: {
      "Content-Type": "application/json",
      "X-CSRFToken": getCookie("csrf_token"),
    },
  })
    .then((response) => response.json())
    .then((data) => {
      if (data.message) {
        alert(data.message);
        window.location.reload();
      } else if (data.error) {
        alert(data.error);
      }
    })
    .catch((error) => {
      console.error("Error deleting thread:", error);
      alert("Failed to delete thread.");
    });
}

function logOut() {
  console.log("Logging out..."); // Debugging log
  fetch("/logout", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "X-CSRFToken": getCookie("csrf_token"), // Include CSRF token if needed
    },
  })
    .then((response) => {
      console.log("Response received:", response); // Debugging log
      if (response.redirected) {
        window.location.href = response.url; // Redirect to login page
      } else {
        alert("Logout failed.");
      }
    })
    .catch((error) => {
      console.error("Error logging out:", error);
      alert("Logout failed.");
    });
}

// Function to get CSRF token if you need it
function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== "") {
    const cookies = document.cookie.split(";");
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      // Does this cookie string begin with the name we want?
      if (cookie.substring(0, name.length + 1) === name + "=") {
        cookieValue = decodeURIComponent(
          cookie.substring(name.length + 1)
        );
        break;
      }
    }
  }
  return cookieValue;
}
